{"_id":"PEuCKbKkFuXtp5dQ","name":"Draw","type":"script","author":"MIb5Ldg8TLeVngZ1","img":"icons/sundries/documents/document-symbol-rune-brown.webp","scope":"global","command":"const defaultDraw = 1;\n\nconst cardNames = [\n    \"The Sun\",\n    \"The Traveler\",\n    \"The World\",\n    \"The Void\",\n    \"The Tapestry\",\n    \"The Moon\"\n];\n\nfunction tag(value) {\n    return `<span class=\"tag\">${value}</span>`;\n}\n\nfunction buildTags(item) {\n    return `\n        <div class=\"tags\">\n            ${[...item.system.traits.value].map(tag).join(\"\")}\n        </div>\n    `;\n}\n\n// effect.link is broken in 0.8.6\nfunction getCompendiumLink(item) {\n    return `@Compendium[${item.uuid.replace(\"Compendium.\", \"\")}]{${item.name}}`;\n}\n\n(async () => {\n    let draws = defaultDraw;\n    let cards = [];\n    \n   //\n    for(let c = 0; c < draws; c++){\n        const roll = await new Roll(\"1d6\").evaluate();\n        const drawnCardName = cardNames[roll.total - 1];\n        \n        const pack = game.packs.get(\"pf2e-darth-and-drow.harrower-actions-and-spells\");\n        const index = await pack.getIndex();\n        const effectId = pack.index.find(i => i.name === drawnCardName)?._id;\n        \n        console.log(drawnCardName);\n        console.log(pack);\n        console.log(index);\n        console.log(effectId);\n            \n        if (!effectId) {\n            \n            ui.notifications.error(`Failed to load ${drawnCardName}`);\n            return;\n        }\n        \n        const UUID = `Compendium.pf2e-darth-and-drow.harrower-actions-and-spells.${effectId}`;\n        \n        const effect = await fromUuid(UUID);\n        \n        const rollRendered = await roll.render();\n        const link = getCompendiumLink(effect);\n        \n        \n        \n        let existing = actor.items.filter(i => i.type === effect.type).find(e => e.name === effect.name);\n        if (existing) {\n            c--;\n            // await token.actor.deleteOwnedItem(existing._id);\n        } else {\n            let item = duplicate(effect);\n            await actor.createEmbeddedDocuments('Item',[item]);\n            await cards.push({id:effectId,effect:effect,link:link});\n        }\n        \n    }\n    let message = \"\";\n    for(let e = 0; e< cards.length;e++){\n        message += `<li class=\"table-result\">\n                            <img class=\"result-image\" src=\"${cards[e].effect.img}\"/>\n                            <div class=\"result-text\">\n                                ${cards[e].link} was <span class=\"pf2-icon\">F</span> Drawn\n                            </div>\n                        </li>`;\n    }\n    await ChatMessage.create({\n        speaker: ChatMessage.getSpeaker(),\n        content : `\n            <div class=\"pf2e chat-card\">\n                <header class=\"card-header flexrow\">\n                    <img src=\"icons/sundries/documents/document-symbol-rune-brown.webp\"/>\n                    <h3>Draw <span class=\"pf2-icon\">F</span></h3>\n                </header>\n                <div class=\"table-draw\">\n                    <div class=\"tags\">\n                        ${tag(\"Harrower\")} ${tag(\"Manipulate\")}\n                    </div>\n                    <ol class=\"table-results\">\n                        ${message}\n                    </ol>\n                </div>\n            </div>\n        `.trim(),\n    });\n})();","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.DiGixS6FgqTlWW9P"},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"MIb5Ldg8TLeVngZ1":3,"O0hRED8cT0IDTguW":3},"_stats":{"systemId":"pf2e","systemVersion":"4.1.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1664822570482,"lastModifiedBy":"KPVkkpR21c13yy2y"}}
{"_id":"b63gm2G0gQP9kz9f","name":"Play","type":"script","author":"MIb5Ldg8TLeVngZ1","img":"icons/sundries/gaming/playing-cards-grey.webp","scope":"global","command":"const cardNames = [\n  \"The Sun\",\n  \"The Traveler\",\n  \"The World\",\n  \"The Void\",\n  \"The Tapestry\",\n  \"The Moon\",\n];\n\nconst actions = [\n  `<span class=\"pf2-icon\">F</span>`,\n  `<span class=\"pf2-icon\">A</span>`,\n];\n\n// effect.link is broken in 0.8.6\nfunction getCompendiumLink(item) {\n  return `@Compendium[${item.uuid.replace(\"Compendium.\", \"\")}]{${item.name}}`;\n}\n\nasync function getFromCompendium(card) {\n  const pack = game.packs.get(\n    \"pf2e-darth-and-drow.harrower-actions-and-spells\"\n  );\n  const index = await pack.getIndex();\n  const effectId = pack.index.find((i) => i.name === card.name)?._id;\n  if (!effectId) {\n    ui.notifications.error(`Failed to load ${card.name}`);\n    return;\n  }\n  const UUID = `Compendium.pf2e-darth-and-drow.harrower-actions-and-spells.${effectId}`;\n\n  return await fromUuid(UUID);\n}\n\nfunction parseCard(card) {\n  const cardHtml = card.system.description.value;\n  const nodes = [...$(cardHtml)];\n  if (nodes.length === 1) {\n    ui.notifications.error(\n      `Could not parse card ${card.name}, invalid html format, there should be no containing divs`\n    );\n  }\n\n  let currentSection = [];\n  const sections = [currentSection];\n  for (const node of nodes) {\n    if (node.tagName === \"H3\") {\n      sections.push([node]);\n      currentSection = [];\n      sections.push(currentSection);\n    } else {\n      currentSection.push(node);\n    }\n  }\n\n  const renders = sections.map((s) => s.map((ss) => ss.outerHTML).join(\"\"));\n\n  return {\n    content: cardHtml,\n    renders,\n    play: renders[2],\n    royalRoad: renders[4],\n    harrowsBlessing: renders[8],\n    benefic: renders[6],\n  };\n}\n\nasync function render(actor, cards) {\n  const cardSections = cards.map((card) => {\n    const parsed = parseCard(card);\n\n    console.log(card);\n    return `\n        <div style=\"float: left; margin-right: 8px; width: 400px\">\n            <h2 class=\"card-header\">\n                <img style=\"margin-right: 5px\" width=26 height=26 src=\"${card.img}\"/>\n                ${card.name}\n                <div class=\"card-buttons\">\n                    <img class=\"card-button\" data-action=\"redraw\" data-effect-id=\"${card.id}\" src=\"icons/magic/time/arrows-circling-green.webp\" title=\"Redraw\"/>\n                    <img class=\"card-button\" data-action=\"sacrifice\" data-effect-id=\"${card.id}\" src=\"systems/pf2e/icons/default-icons/spell.webp\" title=\"Royal Road\"/>\n                    <img class=\"card-button\" data-action=\"play\" data-effect-id=\"${card.id}\" src=\"icons/sundries/gaming/playing-cards-grey.webp\" title=\"Play (Normal)\"/>\n                    <img class=\"card-button\" data-action=\"royalRoad\" data-effect-id=\"${card.id}\" src=\"icons/sundries/gaming/playing-cards-brown.webp\" title=\"Play (Royal Road)\"/>\n                    <img class=\"card-button\" data-action=\"harrowsBlessing\" data-effect-id=\"${card.id}\" src=\"icons/sundries/gaming/rune-card.webp\" title=\"Play (Harrow's Blessing)\"/>\n                    <img class=\"card-button\" data-action=\"benefic\" data-effect-id=\"${card.id}\" src=\"systems/pf2e/icons/spells/angelic-halo.webp\" title=\"Benefic (Play)\"/>\n                    <img class=\"card-button\" data-action=\"benefic2\" data-effect-id=\"${card.id}\" src=\"icons/magic/light/explosion-star-glow-purple.webp\" title=\"Benefic (Royal Road)\"/>\n                </div>\n\n            </h2>\n            <div>\n                ${parsed.content}\n            </div>\n        </div>`;\n  });\n\n  const content = `\n        <style>\n            #harrower-play-dialog {\n                width: auto!important;\n            }\n            \n            #harrower-play-dialog .card-header {\n                display: flex;\n                align-items: baseline;\n            }\n            \n            #harrower-play-dialog .card-header .card-buttons {\n                margin-left: auto;\n            }\n            \n            #harrower-play-dialog .card-header .card-button {\n                width: 25px;\n                height: 25px;\n            }\n            \n            #harrower-play-dialog .card-button:hover {\n                cursor: pointer;\n            }\n        </style>\n        <div style=\"display: flex; flex-direction: row; margin-left: 8px;\">\n            ${cardSections.join(\"\")}\n        </div>\n    `;\n\n  return content;\n}\n\nasync function showCardDialog(actor, target) {\n  function createMessage(content) {\n    return ChatMessage.create({\n      speaker: ChatMessage.getSpeaker(),\n      content,\n    });\n  }\n\n  const cards = actor.itemTypes.effect.filter((e) =>\n    cardNames.includes(e.name)\n  );\n  if (cards.length === 0) {\n    ui.notifications.error(\"Cannot play cards with an empty hand\");\n    return;\n  }\n\n  const content = await render(actor, cards);\n  const dialog = new Dialog(\n    {\n      title: \"Play\",\n      content,\n      buttons: {},\n      render: (html) => {\n        html.find(\".card-button\").on(\"click\", async (evt) => {\n          const button = evt.target;\n          const action = button.dataset.action;\n          const effectId = button.dataset.effectId;\n          const card = actor.items.get(effectId);\n          const compendiumCard = await getFromCompendium(card);\n          const parsed = parseCard(card);\n          const compendiumLink = getCompendiumLink(compendiumCard);\n          console.log(parsed);\n          if (action === \"sacrifice\" || action === \"redraw\") {\n            const img =\n              action === \"sacrifice\"\n                ? \"systems/pf2e/icons/default-icons/spell.webp\"\n                : \"icons/magic/time/arrows-circling-green.webp\";\n            const sacrificeIcon = `<img src=\"${img}\" style=\"width: 24px; height: 24px; object-fit: cover; margin-right:8px;\"/>`;\n            const message =\n              action === \"sacrifice\"\n                ? `${compendiumLink} was ${actions[1]} sacrificed for more power`\n                : `${compendiumLink} will be redrawn`;\n            await createMessage(`\n                        <div class=\"dice-roll\">\n                        <div class=\"dice-result\">\n                        <div class=\"dice-total statuseffect-message\">\n                            <div class=\"flavor-text\" style=\"display: flex; align-items: center;\">\n                                ${sacrificeIcon}\n                                <span class=\"statuseffect-li\">\n                                    ${message}\n                                </span>\n                            </div>\n                        </div>\n                        </div>\n                        </div>\n                    `);\n\n            await card.delete();\n            const drawMacro = game.macros.find((m) => m.name === \"Draw\");\n            if (!drawMacro) {\n              ui.notifications.warn(\"Could not find Draw macro\");\n            }\n\n            drawMacro.execute(1);\n            dialog.close();\n          }\n          if (action === \"play\" || action === \"royalRoad\") {\n            const img =\n              action === \"play\"\n                ? \"icons/sundries/gaming/playing-cards-grey.webp\"\n                : \"icons/sundries/gaming/playing-cards-brown.webp\";\n            const message =\n              action === \"play\"\n                ? `${compendiumLink} Played`\n                : `${compendiumLink} Royal Road`;\n            createMessage(\n              `\n                    <div class=\"pf2e chat-card\">\n                        <header class=\"card-header flexrow\">\n                            <img src=\"${img}\"/>\n                            <h3>Play ${\n                              action === \"royalRoad\" ? \"(Royal Road) \" : \"\"\n                            }<span class=\"pf2-icon\">1</span></h3>\n                        </header>\n                        <div class=\"flavor-text\" style=\"display: flex; align-items: center;\">\n                            <span>${message}</span>\n                        </div>${parsed[action]}\n                    </div>`.trim()\n            );\n\n            await card.delete();\n            dialog.close();\n          }\n          if (action === \"harrowsBlessing\") {\n            const message = `${compendiumLink} <b>Duration</b> 10 Minutes`;\n            createMessage(\n              `\n                    <div class=\"pf2e chat-card\">\n                        <header class=\"card-header flexrow\">\n                            <img src=\"icons/sundries/gaming/rune-card.webp\"/>\n                            <h3>Harrow's Blessing <span class=\"pf2-icon\">2</span></h3>\n                        </header>\n                        <div class=\"flavor-text\" style=\"display: flex; align-items: center;\">\n                            <span>${message}</span>\n                        </div>${parsed[action]}\n                    </div>`.trim()\n            );\n\n            await card.delete();\n            dialog.close();\n          }\n          if (action === \"benefic\") {\n            let fp = actor.system.resources.focus.value;\n\n            console.log(fp);\n\n            if (fp === 0) {\n              ui.notifications.warn(\"No Focus Points left!\");\n              return;\n            }\n\n            await actor.update({\n              \"data.resources.focus.value\":\n                actor.system.resources.focus.value - 1,\n            });\n\n            const message = `${compendiumLink} Play <span class=\"pf2-icon\">1</span> + Benefic <span class=\"pf2-icon\">1</span>`;\n            createMessage(\n              `\n                    <div class=\"pf2e chat-card\">\n                        <header class=\"card-header flexrow\">\n                            <img src=\"systems/pf2e/icons/spells/angelic-halo.webp\"/>\n                            <h3>Benefic</h3>\n                        </header>\n                        <div class=\"flavor-text\" style=\"display: flex; align-items: center;\">\n                            <span>${message}</span>\n                        </div>\n                        <div class=\"card-content\">\n                            ${parsed.benefic}\n                            <hr>\n                            ${parsed.royalRoad}\n                        </div>\n                        \n                    </div>`.trim()\n            );\n            let plv = actor.details.level.value;\n\n            let lv = Math.ceil(plv / 2);\n\n            console.log(lv);\n\n            let heals = lv * 8;\n\n            console.log(heals);\n\n            let roll = new Roll(heals + \"[Healing]\");\n\n            await roll.toMessage({ flavor: \"Benefic - Healing\" });\n\n            await card.delete();\n            dialog.close();\n          }\n          if (action === \"benefic2\") {\n            let fp = actor.system.resources.focus.value;\n\n            console.log(fp);\n\n            if (fp === 0) {\n              ui.notifications.warn(\"No Focus Points left!\");\n              return;\n            }\n\n            await actor.update({\n              \"data.resources.focus.value\":\n                actor.system.resources.focus.value - 1,\n            });\n\n            const message = `${compendiumLink} Play <span class=\"pf2-icon\">1</span> + Benefic <span class=\"pf2-icon\">1</span>`;\n\n            createMessage(\n              `\n                    <div class=\"pf2e chat-card\">\n                        <header class=\"card-header flexrow\">\n                            <img src=\"systems/pf2e/icons/spells/angelic-halo.webp\"/>\n                            <h3>Benefic</h3>\n                        </header>\n                        <div class=\"flavor-text\" style=\"display: flex; align-items: center;\">\n                            <span>${message}</span>\n                        </div>\n                        <div class=\"card-content\">\n                            ${parsed.benefic}\n                            <hr>\n                            ${parsed.royalRoad}\n                        </div>\n                    </div>`.trim()\n            );\n            let plv = actor.system.details.level.value;\n\n            let lv = Math.ceil(plv / 2);\n\n            console.log(lv);\n\n            let heals = lv * 8;\n\n            console.log(heals);\n\n            let roll = new Roll(heals + \"[Healing]\");\n\n            await roll.toMessage({ flavor: \"Benefic - Healing\" });\n\n            await card.delete();\n            dialog.close();\n          }\n        });\n      },\n    },\n    { id: \"harrower-play-dialog\" }\n  ).render(true);\n}\n\n(async () => {\n  const token = canvas.tokens.controlled[0];\n  const target = Array.from(game.user.targets)[0] || null;\n  const actor = token.actor || game.user.character;\n  if (!actor) {\n    ui.notifications.error(\"A actor must be selected\");\n  }\n  await showCardDialog(actor, target);\n})();","folder":null,"sort":0,"flags":{"core":{"sourceId":"Macro.LDNHSeNNeBMuX5dG"},"advanced-macros":{"runAsGM":false}},"ownership":{"default":0,"MIb5Ldg8TLeVngZ1":3,"O0hRED8cT0IDTguW":3},"_stats":{"systemId":"pf2e","systemVersion":"4.1.3","coreVersion":"10.286","createdTime":null,"modifiedTime":1664822152529,"lastModifiedBy":"KPVkkpR21c13yy2y"}}
